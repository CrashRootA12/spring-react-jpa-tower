{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","documentType","setDocumentType","siteType","setSiteType","srType","setSRType","btsType","setBTSType","tmType","setTMType","mwHeight","setMWHeight","mwAzimuth","setMWAzimuth","selectedFile","setSelectedFile","cssOptions","apiResponse","setApiResponse","handleSubmit","a","theDto","formData","Object","keys","reduce","key","append","FormData","Math","floor","random","toString","fetch","method","body","json","console","log","style","display","justifyContent","encType","onSubmit","e","preventDefault","htmlFor","className","required","name","id","onChange","target","value","type","files","length","map","idx","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f502b04.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\ntype TowerDataDTO = {\n  documentType: string;\n  siteType: string;\n  srType: string;\n  btsType: string;\n  tmType: string;\n  mwHeight?: number;\n  mwAzimuth?: number;\n};\nconst SERVER_URL =\n  process.env.NODE_ENV === \"development\" ? \"http://localhost:7000\" : \"\";\nfunction App() {\n  const [documentType, setDocumentType] = useState(\"Site_Agreement_Copy\");\n  const [siteType, setSiteType] = useState(\"GBT\");\n  const [srType, setSRType] = useState(\"Urban\");\n  const [btsType, setBTSType] = useState(\"Indoor\");\n  const [tmType, setTMType] = useState(\"MW\");\n  const [mwHeight, setMWHeight] = useState(0);\n  const [mwAzimuth, setMWAzimuth] = useState(0);\n  const [selectedFile, setSelectedFile] = useState({} as File);\n  const cssOptions = {};\n  const [apiResponse, setApiResponse] = useState({});\n  const handleSubmit = async () => {\n    const theDto: TowerDataDTO = {\n      btsType,\n      documentType,\n      siteType,\n      srType,\n      tmType,\n      mwAzimuth,\n      mwHeight,\n    };\n    const formData = Object.keys(theDto).reduce((formData, key) => {\n      formData.append(key, (theDto as any)[key]);\n      return formData;\n    }, new FormData());\n    formData.append(\"file\", selectedFile);\n    formData.append(\"id\", Math.floor(Math.random() * 99999).toString());\n    // Sending the Data\n\n    setApiResponse(\n      await (\n        await fetch(`${SERVER_URL}/thePostEndpoint`, {\n          method: \"POST\",\n          body: formData,\n        })\n      ).json()\n    );\n    console.log(apiResponse);\n  };\n\n  return (\n    <>\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <form\n          encType=\"multipart/form-data\"\n          onSubmit={(e) => {\n            e.preventDefault();\n            handleSubmit();\n          }}\n        >\n          <label\n            htmlFor=\"document_type\"\n            className=\"row m-auto\"\n            style={cssOptions}\n          >\n            Document To Upload\n          </label>\n          <select\n            required\n            name=\"document_type\"\n            id=\"document_type\"\n            className=\"row m-auto p-4 \"\n            style={cssOptions}\n            onChange={(e: any) => setDocumentType(e.target.value)}\n          >\n            <option value=\"Site_Agreement_Copy\">Site Agreement Copy</option>\n            <option value=\"Electricity_Bill\">Electricity Bill</option>\n            <option value=\"NOC_Form\">NOC Form Co-Owners</option>\n            <option value=\"Municipal_Permission\">Municipal Permission</option>\n          </select>\n\n          <label htmlFor=\"file\" style={cssOptions} className=\"row m-auto\">\n            <b>Upload {documentType}</b>\n          </label>\n          <input\n            required\n            type=\"file\"\n            id=\"file\"\n            name=\"document_file\"\n            className=\"row m-auto\"\n            style={cssOptions}\n            onChange={(e) => {\n              setSelectedFile(e.target.files![0]);\n            }}\n          />\n          <label htmlFor=\"SiteType\">Site Type</label>\n          <select\n            name=\"SiteType\"\n            id=\"SiteType\"\n            onChange={({ target: { value } }) => setSiteType(value)}\n          >\n            <option value=\"GBT\">GBT</option>\n            <option value=\"RTT\">RTT</option>\n            <option value=\"RTP\">RTP</option>\n            <option value=\"COW\">COW</option>\n          </select>\n          <label htmlFor=\"SRType\">SR Type</label>\n          <select\n            required\n            name=\"SRType\"\n            id=\"SRType\"\n            onChange={({ target: { value } }) => setSRType(value)}\n          >\n            <option value=\"Urban\">Urban</option>\n            <option value=\"Rural\">Rural</option>\n            <option value=\"Semi-Urban\">Semi-Urban</option>\n          </select>\n          <label htmlFor=\"BTSType\">BTS Type</label>\n          <select\n            required\n            name=\"BTSType\"\n            id=\"BTSType\"\n            onChange={({ target: { value } }) => setBTSType(value)}\n          >\n            <option value=\"Indoor\">Indoor</option>\n            <option value=\"Outdoor\">Outdoor</option>\n            <option value=\"Split\">Split</option>\n          </select>\n          <label htmlFor=\"TMType\">Transmission Type</label>\n          <select\n            required\n            name=\"TMType\"\n            id=\"TMType\"\n            onChange={({ target: { value } }) => {\n              setTMType(value);\n              if (value === \"Fiber\") setMWAzimuth(-1);\n              setMWHeight(-1);\n            }}\n          >\n            <option value=\"MW\">MW</option>\n            <option value=\"Fiber\">Fiber</option>\n          </select>\n          {(() => {\n            if (tmType === \"MW\")\n              return (\n                <div>\n                  <b>MW Details </b>\n                  <>\n                    <label htmlFor=\"MWHeight\">Height of MW</label>\n                    <input\n                      required\n                      type=\"number\"\n                      name=\"MWHeight\"\n                      id=\"MWHeight\"\n                    \n                      onChange={({ target: { value } }) => setMWHeight(+value)}\n                    />\n                    <label htmlFor=\"MWAzimuth\">Azimuth of MW</label>\n                    <input\n                      required\n                      type=\"number\"\n                      name=\"MWAzimuth\"\n                      id=\"MWAzimuth\"\n                      \n                      onChange={({ target: { value } }) => setMWAzimuth(+value)}\n                    />\n                  </>\n                </div>\n              );\n          })()}\n          <button className=\"btn btn-primary\" type=\"submit\">\n            Submit Details\n          </button>\n        </form>\n      </div>\n\n      {Object.keys(apiResponse).length !== 0 ? (\n        <>\n          <h1>Response From API</h1>\n          {Object.keys(apiResponse).map((key, idx) => {\n            return (\n              <>\n                <li key={idx}>\n                  {key}: {(apiResponse as any)[key]}\n                </li>\n              </>\n            );\n          })}{\" \"}\n        </>\n      ) : (\n        <></>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}